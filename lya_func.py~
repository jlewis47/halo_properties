#coding: utf-8

import numpy as np
from constants_metal import *

def ray2D(X0,Y0,D_lim,angle,lim):

        """
        Angle in rad
        X0,Y0 in grid units
        D_lim in cells
        lim box size in cells
        """


        xn=X0
        yn=Y0

        Xs=[xn]
        Ys=[yn]
        Ds=[0]

        D_tot=0
        
        while(D_tot<D_lim):


                if xn>=lim-1:
                        xn=0
                        Xs.append(xn)

                        if yn>=lim-1:
                                yn=0

                        Ys.append(yn)
                        Ds.append(0)

                elif yn>=lim-1:
                        yn=0
                        Ys.append(yn)

                        if xn>=lim-1:
                                xn=0

                        Xs.append(xn)
                        Ds.append(0)


                #hyp1
                
                xnp1=np.floor(xn)+1
                dx=xnp1-xn

                ynp1=np.tan(angle)*dx+yn
                dy=ynp1-yn

                if ynp1>np.floor(yn)+1 or xnp1>np.floor(xn)+1:
                
                        #hyp2

                        ynp1=np.floor(yn)+1
                        dy=ynp1-yn

                        xnp1=dy/np.tan(angle)+xn
                        dx=xnp1-xn

                        
                        #print('hyp 2',dy,dx)
                

                #else:

                        #print('hyp 1',dy,dx)



                #print(xnp1,ynp1)
                Xs.append(xnp1)
                Ys.append(ynp1)

                D=(dx**2.+dy**2.)**0.5
                D_tot+=D
                Ds.append(D)

                xn=xnp1
                yn=ynp1

        return(Xs,Ys,Ds,D_tot)


def forest(vexp,nHI,T,HzSI,px_to_m,dist):


        Vx=(2*Bmann*T/Pmass)**0.5

        Vloc=np.copy(vexp)

        #sigs=interp_sig_vect()

        #taus=np.copy(nHI)*1e6*px_to_m*4.48e-22/np.pi**0.5*c
        taus=np.ones_like(nHI)*1e6*px_to_m*4.48e-22/np.pi**0.5*c


        for i in range(len(taus)):


                if i==0:
                    Vloc[4096-1024:]=HzSI*np.arange(-1024,0)*px_to_m
                if i==4096-2*1024:
                    Vloc=np.arange(0,4096)*codaii_HzSI*px_to_m
                if i==4096-1024:
                    Vloc[0:1024]+=Vloc[-1]

                vT=Vloc+vp*1e-2
                DV=Vloc[i]-vT

                taus[i]*=np.sum(nHI/Vx*np.exp(-(DV/Vx)**2))
                #taus[i]*=np.sum(1./Vx*np.exp(-(DV/Vx)**2))

        return(taus)



def plot_lya_forest(ax,fig):

	zbecker2013=[2.15 ,2.25 ,2.35,2.45,2.55,2.65,2.75,2.85,2.95,3.05,3.15,3.25 ,3.35,3.45,3.55,3.65,3.75,3.85,3.95,4.05,4.15,4.25,4.35,4.45,4.55,4.65,4.75,4.85]
	meanFbecker2013=[0.8806, 0.8590, 0.8304, 0.7968, 0.7810, 0.7545, 0.7371, 0.7167, 0.6966, 0.6670, 0.6385, 0.6031, 0.5762, 0.5548, 0.5325, 0.4992, 0.4723, 0.4470, 0.4255, 0.4030, 0.3744, 0.3593,0.3441, 0.3216,0.3009, 0.2881, 0.2419, 0.2225]  
	errmeanFbecker2013=[0.0103,0.0098,0.0093,0.0089,0.0090,0.0088,0.0088,0.0086,0.0084,0.0082,0.0080,0.0079,0.0074,0.0071,0.0071,0.0069,0.0068,0.0072,0.0071,0.0071,0.0074,0.0075,0.0102,0.0094,0.0104,0.0117,0.0201,0.0151]
	teffbecker2013=-np.log(meanFbecker2013)
	errtaueffbecker2013=-np.log(np.array(meanFbecker2013)+np.array(errmeanFbecker2013))-np.array(teffbecker2013)

	zabs_beck_2014=[5.902,5.737,5.577,5.423,5.948,5.781,5.620,5.464,5.635,5.479,5.328,5.183,5.586,5.432,
5.283,5.139,5.577,5.423,5.274,5.130,5.478,5.327,5.182,5.423,5.275,5.131,4.992,4.858,5.138,4.999,4.864,4.734,4.608,
5.043,4.907,4.776,4.648,4.525,4.996,4.861,4.731,4.605,4.484,4.929,4.797,4.669,4.545,4.425,4.824,4.696,4.571,4.450,4.333,
4.720,4.594,4.473,4.355,4.242,4.691,4.567,4.446,4.329,4.216,4.634,4.511,4.393,4.278,4.166,4.625,4.502,4.384,4.269,4.158,
4.453,4.336,4.223,4.113,4.007,4.358,4.244,4.134,4.027,3.923,4.349,4.235,4.125,4.018,3.915,4.282,4.170,4.062,3.958,3.856,
4.282,4.170,4.062,3.958,3.856,4.253,4.143,4.035,3.932,3.831,4.244,4.134,4.027,3.923,3.822]
	Fmoy_beck_2014=[0.01149, 0.01578, 0.03836, 0.10284, 0.00820, 0.01404, 0.02544, 0.07504,0.03103, 0.02652, 
0.05167, 0.07156, 0.09962, 0.07989, 0.09959, 0.16812, 0.02299, 0.04055, 0.06021, 0.06568, 0.04605, 
0.06339, 0.13982, 0.04361, 0.06883, 0.11174, 0.07700, 0.14021, 0.23508, 0.16729, 0.17614, 0.19190, 0.19291, 0.12661, 
0.16273, 0.15605, 0.25978, 0.31753, 0.25503, 0.12560,0.22512, 0.30364, 0.29008, 0.17196, 0.10740, 0.18277, 0.16960, 
0.37799, 0.19396, 0.18355, 0.35492, 0.28457,0.32831,0.15083,0.28959,0.28650,0.35385,0.31313,0.29507,0.23270,0.42480,
0.38612,0.34395,0.27845,0.29665,0.22136,0.29759,0.34961,0.20429,0.20725,0.45577,0.33738,0.29428,0.27003,0.32692,
0.40195,0.39365,0.47038,0.39491,0.42531,0.35357,0.34943,0.38447,0.45173,0.28621,0.46655,0.27414,0.45430,0.38280,
0.27687,0.32834,0.45227,0.51813,0.46323,0.38739,0.42680,0.46304,0.41029,0.47062,0.29638,0.41984,0.40853,0.48802,
0.29407,0.41240,0.38504,0.45380,0.47881] 
	errFmoy_beck_2014=[0.00263,0.00209,0.00187,0.00178,0.00075,0.00056,0.00062,0.00067,0.00197,0.00206,0.00150,
0.00136,0.00253,0.00227,0.00190,0.00196,0.00281,0.00270,0.00210,0.00249,0.00043,0.00043,0.00040,0.00674,
0.00505,0.00586,0.00758,0.00519,0.00062,0.00069,0.00063,0.00071,0.00074,0.00058,0.00059,0.00059,0.00068,0.00059,0.00107,
0.00083,0.00100,0.00101,0.00105,0.00120,0.00103,0.00124,0.00132,0.00109,0.00147,0.00157,0.00172,0.00161,0.00153,0.00085,
0.00088,0.00085,0.00095,0.00096,0.00045,0.00040,0.00037,0.00036,0.00036,0.00190,0.00181,0.00196,0.00206,0.00235,0.00184,
0.00185,0.00221,0.00222,0.00254,0.00090,0.00205,0.00216,0.00197,0.00191,0.00075,0.00087,0.00090,0.00091,0.00097,0.00042,
0.00043,0.00051,0.00045,0.00053,0.00171,0.00179,0.00184,0.00200,0.00205,0.00244,0.00287,0.00301,0.00323,0.00329,0.00093,
0.00104,0.00111,0.00116,0.00127,0.00070,0.00075,0.00073,0.00075,0.00079]
	errtaueff_beck_2014=-np.log(np.array(Fmoy_beck_2014)+np.array(errFmoy_beck_2014))--np.log(np.array(Fmoy_beck_2014))

	# 4 errorbars in becker 2014
	zabs_beck_2014_2=[6.0737-0.01,5.797,5.7466 + 0.02,5.7369 - 0.01]
	errFmoy_min=-np.log(2*np.array([0.00196,0.00307,0.00280,0.00312]))
	errFmoy_max=-np.log(np.array([0.0005,0.0021,0.0010,0.0018])) 
	y = np.array([1,1,1,1])  
	ytop = errFmoy_max-y
	ybot = y-errFmoy_min

	# 3 arrows in becker 2014 ULAS J0148+0600 (2 first) and SDSS J2315âˆ’0023 (last entry)
	zulasj01480600=[5.796,5.634,5.965]
	errFmoy_j01480600=[0.00037,0.00051,0.00273]
	dxarrow=[0,0,0]
	dyarrow=[0.25,0.25,0.25]


	z_abs_fan2006=[5.58,5.43,5.28,5.13,4.98,5.64,5.49,5.34,5.19,5.04,5.81,5.66,5.51,5.36,5.21,5.06,5.52,5.37,5.22,5.07,4.92,5.66,
5.51,5.36,5.21,5.06,5.61,5.46,5.31,5.16,5.01,6.10,5.95,5.80,5.65,5.50,5.35,5.55,5.40,5.25,5.10,4.95,5.68,5.53,5.38,5.83,5.68,5.53,5.38,5.23, 
5.08,6.25,6.10,5.95,5.80,5.65,5.50,5.90,5.75,5.60,5.45,5.30,5.77,5.62,5.47,5.32, 5.17,5.73,5.58,5.43,5.28,5.13,5.71,5.56,5.41,5.26,5.11,
5.66,5.51,5.36,5.21,5.06,5.85,5.70,5.55,5.40,5.25,5.93,5.78,5.63,5.48,5.33,5.62,5.47,5.32,5.17]

	Fmoy_fan2006=[0.0170,0.0573 ,0.0205 ,0.1243 ,0.1002 ,0.0823 ,0.0718 ,0.0961 ,0.0578 ,0.1567 ,0.0216  ,0.0440 ,0.0984 ,0.1192 ,
0.0884 ,0.1285 ,0.0907 ,0.0348 ,0.0606  ,0.0751 ,0.1276 ,0.0883  ,0.1127  ,0.1661 ,0.1191 ,0.1765 ,0.0884,0.1041 ,0.0596,0.1165,0.1268  ,0.0012  ,
0.0060 ,0.0260 ,0.0462 ,0.0661 , 0.1147,0.0686 ,0.0520 , 0.0427,0.0898 ,0.1139 ,0.0117 ,0.0519 ,0.0736  ,0.0116 ,0.1010  ,0.0742 ,0.1341 ,0.1323 ,0.0530 ,
0.0015  ,0.0051 ,0.0038  ,0.0186 ,0.0433 ,0.0278  ,0.0108  ,0.0055 ,0.0248 ,0.0077 ,0.0776  ,0.0645 ,0.0690  ,0.0991 ,0.0864 ,0.1156,0.0224,0.0445,
0.1215,0.1217,0.1293,0.0322,0.0665,0.0858,0.0690,0.1650,0.0714,0.0775,0.0895,0.1292,0.1509,0.0687,0.0729,0.0795,0.0802,0.0934,0.0125,0.0071,
0.0402,0.0407,0.0546,0.0495,0.1015,0.1376,0.0869]


	
	

	
	ax.scatter(z_abs_fan2006,-np.log(Fmoy_fan2006), marker='o', facecolors='none', edgecolors='k')
	ax.errorbar(zbecker2013,teffbecker2013,yerr=errtaueffbecker2013, fmt='go',mfc='None', mec='g')
	ax.errorbar(zabs_beck_2014,-np.log(Fmoy_beck_2014),yerr=errtaueff_beck_2014, fmt='bs' ,mfc='None', mec='b')
	ax.errorbar(zabs_beck_2014_2, y, yerr=(ybot, ytop),fmt='bs',mfc='None', mec='w')

	for i in range(len(zulasj01480600)):
		ax.arrow(zulasj01480600[i], -np.log(2*errFmoy_j01480600[i]),dxarrow[i],dyarrow[i], fc="b", ec="b",head_width=0.04, head_length=0.2)
	
	ax.set_xlabel(r"$\mathrm{redshift} \, z$",fontsize=20)
	ax.set_ylabel(r"$\mathrm{\tau_{eff}}$",fontsize=20)
	ax.set_xlim(1.5,6.5)
	ax.set_ylim(0,9)


def lya_cuml_plot(ax,fig):


        teff_list_becker_58=np.asarray([2.61867,2.67801,2.74109,3.43579,3.64966,3.79869,3.83506,3.87040,3.98459,4.14901,4.45675,4.52821,4.94766,5.11600,5.63500,5.70500,6.02500,7.21000])

        #bins=np.linspace(teff_list_becker_58[0],teff_list_becker_58[-1]+1,100)
        bins=np.arange(0,9,0.1)
        becker_hist,bins=np.histogram(teff_list_becker_58,bins=bins)

        cum_hist=np.cumsum(becker_hist)/float(np.sum(becker_hist))

        ax.plot(bins[:-1],cum_hist,label="Becker+14, z=5.8",linewidth=3,color='gold')


def jon_forest(nHI,T,vp,vexp,Ds,cum_Ds,HzSI,px_to_m):
    
    """
    nHI en m^-3
    T en K
    vp et vexp en m.s^-1
    HzSI en s^-1
    Ds et cum_Ds en cellules
    px_to_m en m
    """
        
    
    sig_alpha=4.48e-22 #m**2

    #T=np.ones_like(nHI)*5e4 #TEST

    Vx=(2*Bmann*T/Pmass)**0.5
    
    size=len(T)


    Vloc=np.copy(vexp)
    
    taus=np.ones_like(nHI)*px_to_m/np.pi**0.5*c*sig_alpha
    

    for i in range(len(taus)):
    
    
        if i==0:
                Vloc[size-int(0.25*size):]=-cum_Ds[:int(0.25*size)][::-1]*HzSI*px_to_m
        if i==int(0.5*size):
                Vloc=cum_Ds*HzSI*px_to_m
        if i==int(0.75*size):
                Vloc[0:int(0.25*size)]+=Vloc[-1]
    

        vT=Vloc+vp
        DV=Vloc[i]-vT
    
        taus[i]*=np.sum(Ds*nHI/Vx*np.exp(-(DV/Vx)**2))
        
    return(taus)
 
